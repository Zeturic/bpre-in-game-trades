#!/usr/bin/env python3

import argparse
import functools
import io
import pathlib
import struct

import encoding

class InGameTrade():
    @staticmethod
    def parse(data, *, original_format=True):
        trade = InGameTrade()

        (
            trade.nickname,
            trade.pokerus,
            trade.species,
            trade.ivs,
            maybe_moveset,
            trade.otId,
            trade.conditions,
            trade.ppBonuses,
            trade.ball,
            _,
            trade.personality,
            trade.heldItem,
            trade.mailNum,
            trade.otName,
            trade.otGender,
            trade.sheen,
            trade.requestedSpecies,
            trade.level,
            maybe_abilityNum,
        ) = struct.unpack("11sBH6sII5sBBBIHB11sBBHBB", data)

        if original_format:
            trade.abilityNum = maybe_moveset & 0xFF
            trade.moveset = 0
        else:
            trade.abilityNum = maybe_abilityNum
            trade.moveset = maybe_moveset

        trade.nickname = encoding.decode(trade.nickname)
        trade.otName = encoding.decode(trade.otName)

        trade.ivs = list(trade.ivs)
        trade.conditions = list(trade.conditions)

        return trade

    def __str__(self):
        return f'''    {{
        .nickname = _("{self.nickname}"),
        .pokerus = 0x{self.pokerus :X},
        .species = 0x{self.species :X},
        .ivs = {{{", ".join(f"{iv}" for iv in self.ivs)}}},
        .abilityNum = {self.abilityNum},
        .otId = {self.otId},
        .conditions = {{{", ".join(f"{condition}" for condition in self.conditions)}}},
        .personality = 0x{self.personality :X},
        .heldItem = 0x{self.heldItem :X},
        .mailNum = {self.mailNum},
        .otName = _("{self.otName}"),
        .otGender = {"FEMALE" if self.otGender else "MALE"},
        .sheen = {self.sheen},
        .requestedSpecies = 0x{self.requestedSpecies :X},
        .level = {self.level},
        .moveset = {f"(u16*) 0x{self.moveset :08X}" if self.moveset else "NULL"},
        .ppBonuses = 0x{self.ppBonuses :X},
        .ball = {self.ball},
    }},'''

    @staticmethod
    def dump(trades):
        yield "// This file is autogenerated."
        yield ""
        yield "#define SKIP_DECLARE_SINGAMETRADES"
        yield ""
        yield '#include "global.h"'
        yield '#include "trade.c.h"'
        yield ""
        yield "const struct InGameTrade sInGameTrades[NUM_INGAME_TRADES] = {"

        for trade in trades:
            yield trade

        yield "};"

integer = functools.wraps(int)(functools.partial(int, base=0))

def main():
    argparser = argparse.ArgumentParser(description='Rough automatic "decompilation" of sInGameTrades.')
    argparser.add_argument("--rom", required=True, type=pathlib.Path)
    argparser.add_argument("--pointer", dest="sInGameTradesPtr", required=True, type=integer)
    argparser.add_argument("--num-trades", dest="NUM_INGAME_TRADES", required=True, type=integer)
    argparser.add_argument("--modified-format", dest="original_format", action="store_false")
    argparser.add_argument("--output", required=True, type=pathlib.Path)

    args = argparser.parse_args()

    rom = io.BytesIO(args.rom.read_bytes())

    rom.seek(args.sInGameTradesPtr & 0x1FFFFFF)
    sInGameTrades = struct.unpack("<I", rom.read(4))[0]
    rom.seek(sInGameTrades & 0x1FFFFFF)

    trades = (
        InGameTrade.parse(rom.read(60), original_format=args.original_format)
        for _ in range(args.NUM_INGAME_TRADES)
    )

    with args.output.open("w") as f:
        for line in InGameTrade.dump(trades):
            print(line, file=f)

if __name__ == "__main__":
    main()
